<included>

    <!--  traceId增强渲染  -->
    <conversionRule conversionWord="traceId" converterClass="com.luman.smy.web.convert.LogTraceConvert"/>

    <!-- 输出到控制台 -->
    <appender name="CONSOLE_LOGGER_APPENDER" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>
        <encoder>
            <pattern>
                ${CONSOLE_LOG_PATTERN}
            </pattern>
            <!-- 设置字符集 -->
            <charset>${charset}</charset>
        </encoder>
    </appender>

    <!-- debug输出到文件 -->
    <appender name="DEBUG_FILE_LOGGER_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${log.path}/${FILE_LOG}/debug.log</file>
        <!-- 设置滚动策略 -->
        <!-- 按天来回滚，如果需要按小时来回滚，则设置为{yyyy-MM-dd_HH} -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--设置日志命名模式 -->
            <fileNamePattern>${log.path}/${FILE_LOG}/debug.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 如果按天来回滚，则最大保存时间为30天，30天之前的都将被清理掉 这里的值与滚动策略模式有关 -->
            <maxHistory>${maxHistory}</maxHistory>
            <!-- 按照日期进行归档，并且对日志文件大小进行限制 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 设置文件大于10MB进行压缩归档 -->
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- 格式化输出 -->
            <pattern>
                ${FILE_LOG_PATTERN}
            </pattern>
            <!-- 设置字符集 -->
            <charset>${charset}</charset>
        </encoder>
    </appender>

    <!-- info输出到文件 -->
    <appender name="INFO_FILE_LOGGER_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${log.path}/${FILE_LOG}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${FILE_LOG}/info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 如果按天来回滚，则最大保存时间为30天，30天之前的都将被清理掉 这里的值与滚动策略模式有关 -->
            <maxHistory>${maxHistory}</maxHistory>
            <!-- 按照日期进行归档，并且对日志文件大小进行限制 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 设置文件大于10MB进行压缩归档 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- 格式化输出 -->
            <pattern>
                ${FILE_LOG_PATTERN}
            </pattern>
            <!-- 设置字符集 -->
            <charset>${charset}</charset>
        </encoder>
    </appender>

    <!-- warn输出到文件 -->
    <appender name="WARN_FILE_LOGGER_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${log.path}/${FILE_LOG}/warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${FILE_LOG}/warn.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 如果按天来回滚，则最大保存时间为30天，30天之前的都将被清理掉 这里的值与滚动策略模式有关 -->
            <maxHistory>${maxHistory}</maxHistory>
            <!-- 按照日期进行归档，并且对日志文件大小进行限制 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 设置文件大于10MB进行压缩归档 -->
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- 格式化输出 -->
            <pattern>
                ${FILE_LOG_PATTERN}
            </pattern>
            <!-- 设置字符集 -->
            <charset>${charset}</charset>
        </encoder>
    </appender>

    <!-- error输出到文件 -->
    <appender name="ERROR_FILE_LOGGER_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${log.path}/${FILE_LOG}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${FILE_LOG}/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 如果按天来回滚，则最大保存时间为30天，30天之前的都将被清理掉 这里的值与滚动策略模式有关 -->
            <maxHistory>${maxHistory}</maxHistory>
            <!-- 按照日期进行归档，并且对日志文件大小进行限制 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 设置文件大于10MB进行压缩归档 -->
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- 格式化输出 -->
            <pattern>
                ${FILE_LOG_PATTERN}
            </pattern>
            <!-- 设置字符集 -->
            <charset>${charset}</charset>
        </encoder>
    </appender>
</included>
